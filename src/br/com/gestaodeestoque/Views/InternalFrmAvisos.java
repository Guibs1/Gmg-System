/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.gestaodeestoque.Views;

import br.com.gestaodeestoque.Models.EstoqueModelo;
import br.com.gestaodeestoque.Models.EventosModelo;
import br.com.gestaodeestoque.dao.EstoqueDAO;
import br.com.gestaodeestoque.dao.EventosDAO;
import java.awt.Dimension;
import java.beans.PropertyVetoException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Guibs
 */
public class InternalFrmAvisos extends javax.swing.JInternalFrame {

    /**
     * Creates new form InternalFrmAvisos
     */
    public InternalFrmAvisos() {
        initComponents();

        ((BasicInternalFrameUI) InternalFrmAvisos.this.getUI()).setNorthPane(null); //retirar o painel superior
        InternalFrmAvisos.this.setBorder(null);
    }

    public void setPosicao() {//colocar embaixo do avisos
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((this.getSize().width + 200), (this.getSize().height - this.getSize().height));

    }

    public void listarSituacao() {
        try {
            EstoqueDAO dao = new EstoqueDAO();
            List<EstoqueModelo> situacao = dao.checaSituacaoEstoque();

            DefaultTableModel modelo = (DefaultTableModel) tabelaAvisos.getModel();
            modelo.setNumRows(0);

            for (EstoqueModelo estoque : situacao) {
                modelo.addRow(new Object[]{
                    estoque.getProduto(),
                    estoque.getProduto().getDescricaoProduto(),
                    estoque.getEst_produto_qtd(),
                    estoque.getStatus()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro" + e);
        }

    }

        private String dataParaMysql(String data) {

        String dia = data.substring(0, 2);
        String mes = data.substring(3, 5);
        String ano = data.substring(6);

        return ano + "-" + mes + "-" + dia;
    }
        
    public void listarValidadesProx() {
        try {

            EstoqueDAO dao = new EstoqueDAO();
            EstoqueModelo estoquemodelo = new EstoqueModelo();
            Date data = new Date();
            SimpleDateFormat formatador = new SimpleDateFormat("yyyy-MM-dd");
            String dataformatada = formatador.format(data);
            estoquemodelo.setData_entrada(dataformatada);
            
            List<EstoqueModelo> validadesProx = dao.checaValidadeProdutos(estoquemodelo);

            DefaultTableModel modelo = (DefaultTableModel) tabelaValidade.getModel();
            modelo.setNumRows(0);

            for (EstoqueModelo estoque : validadesProx) {
                modelo.addRow(new Object[]{
                    estoque.getProduto(),
                    estoque.getDatavalidade(),
                    estoque.getEst_produto_qtd()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro" + e);
        }
    }
    
    public void listarEventosProx(){
            try {
            Date data = new Date();
                        SimpleDateFormat formatador = new SimpleDateFormat("yyyy-MM-dd");
            String dataformatada = formatador.format(data);
            EventosDAO novodao = new EventosDAO();
            List<EventosModelo> listadeeventos = novodao.listarEventosProx(dataformatada);
//            this.listadeestoque = listadeestoque;
            DefaultTableModel modelo = (DefaultTableModel) tabelaAvisos2.getModel();
            modelo.setNumRows(0);
            
            for (EventosModelo eventosmodelo : listadeeventos) {
//                CategoriaModelo categoria = new CategoriaModelo();
//                SubCategoriaModelo subcategoria = new SubCategoriaModelo();
                modelo.addRow(new Object[]{
                    eventosmodelo.getEvento_titulo(),
                    eventosmodelo.getData_inicio(),
                    eventosmodelo.getEvento_data_termino(),
                    eventosmodelo.getEventosProx()
                });
            }
        } catch (Exception e) {
            throw new RuntimeException("Ops, ocorreu um erro ao listar os Produtos" + e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaAvisos = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaValidade = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabelaAvisos2 = new javax.swing.JTable();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Multiply_23px.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, 40, 30));

        tabelaAvisos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Descrição", "Quantidade", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabelaAvisos);
        if (tabelaAvisos.getColumnModel().getColumnCount() > 0) {
            tabelaAvisos.getColumnModel().getColumn(0).setResizable(false);
            tabelaAvisos.getColumnModel().getColumn(1).setResizable(false);
            tabelaAvisos.getColumnModel().getColumn(2).setResizable(false);
            tabelaAvisos.getColumnModel().getColumn(3).setResizable(false);
        }

        jTabbedPane1.addTab("Produtos com Estoque Baixo", jScrollPane4);

        tabelaValidade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Validade", "Dias p/ Validade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tabelaValidade);
        if (tabelaValidade.getColumnModel().getColumnCount() > 0) {
            tabelaValidade.getColumnModel().getColumn(0).setResizable(false);
            tabelaValidade.getColumnModel().getColumn(1).setResizable(false);
            tabelaValidade.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Validades Próximas", jScrollPane5);

        tabelaAvisos2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título", "Início", "Termino", "Dias Restantes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tabelaAvisos2);
        if (tabelaAvisos2.getColumnModel().getColumnCount() > 0) {
            tabelaAvisos2.getColumnModel().getColumn(0).setResizable(false);
            tabelaAvisos2.getColumnModel().getColumn(2).setResizable(false);
            tabelaAvisos2.getColumnModel().getColumn(3).setResizable(false);
        }

        jTabbedPane1.addTab("Eventos Próximos", jScrollPane6);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 412, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        listarSituacao();
        listarValidadesProx();
        listarEventosProx();
        try {
            this.setSelected(isSelected);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(InternalFrmAvisos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tabelaAvisos;
    private javax.swing.JTable tabelaAvisos2;
    private javax.swing.JTable tabelaValidade;
    // End of variables declaration//GEN-END:variables
}
